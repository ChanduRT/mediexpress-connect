import { useState } from "react";
import { useForm } from "react-hook-form";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/components/ui/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { useQueryClient } from "@tanstack/react-query";
import { X, Package, DollarSign, Image, Tag, Hash, ShieldCheck } from "lucide-react";

interface Product {
  id?: string;
  name: string;
  description: string | null;
  price: number;
  image_url: string | null;
  category: string | null;
  stock_quantity: number;
  prescription_required: boolean;
}

interface ProductFormProps {
  product?: Product;
  onClose: () => void;
}

const ProductForm = ({ product, onClose }: ProductFormProps) => {
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { register, handleSubmit, formState: { errors } } = useForm<Product>({
    defaultValues: product || {
      name: "",
      description: "",
      price: 0,
      image_url: "",
      category: "",
      stock_quantity: 0,
      prescription_required: false,
    },
  });

  const onSubmit = async (data: Product) => {
    setIsLoading(true);
    try {
      if (product?.id) {
        // Update existing product
        const { error } = await supabase
          .from('products')
          .update({
            name: data.name,
            description: data.description,
            price: data.price,
            image_url: data.image_url,
            category: data.category,
            stock_quantity: data.stock_quantity,
            prescription_required: data.prescription_required
          })
          .eq('id', product.id);

        if (error) throw error;

        toast({
          title: "Success",
          description: "Product updated successfully",
        });
      } else {
        // Create new product with UUID generated by Supabase
        const { error } = await supabase
          .from('products')
          .insert({
            name: data.name,
            description: data.description,
            price: data.price,
            image_url: data.image_url,
            category: data.category,
            stock_quantity: data.stock_quantity,
            prescription_required: data.prescription_required,
            id: crypto.randomUUID() // Generate UUID client-side
          });

        if (error) throw error;

        toast({
          title: "Success",
          description: "Product created successfully",
        });
      }

      queryClient.invalidateQueries({ queryKey: ['products'] });
      onClose();
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to save product",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm animate-in fade-in-0 duration-300">
      <div className="relative w-full max-w-2xl mx-4 animate-in zoom-in-95 slide-in-from-bottom-5 duration-300">
        <Card className="bg-white/95 backdrop-blur-sm border-0 shadow-2xl">
          <Button
            variant="ghost"
            size="icon"
            className="absolute right-4 top-4 z-10 hover:bg-red-100 hover:text-red-600 transition-colors rounded-full"
            onClick={onClose}
          >
            <X className="h-5 w-5" />
          </Button>
          
          <CardHeader className="pb-6 pt-8">
            <CardTitle className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent flex items-center gap-3">
              <Package className="h-7 w-7 text-blue-600" />
              {product ? "Edit Product" : "Add New Product"}
            </CardTitle>
          </CardHeader>
          
          <CardContent className="space-y-6">
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700 flex items-center gap-2">
                    <Package className="h-4 w-4" />
                    Product Name
                  </label>
                  <Input
                    placeholder="Enter product name"
                    className="transition-all duration-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    {...register("name", { required: "Name is required" })}
                  />
                  {errors.name && (
                    <p className="text-sm text-red-500 animate-in slide-in-from-left-1 duration-200">
                      {errors.name.message}
                    </p>
                  )}
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700 flex items-center gap-2">
                    <DollarSign className="h-4 w-4" />
                    Price
                  </label>
                  <Input
                    type="number"
                    step="0.01"
                    placeholder="0.00"
                    className="transition-all duration-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    {...register("price", {
                      required: "Price is required",
                      min: { value: 0, message: "Price must be positive" },
                    })}
                  />
                  {errors.price && (
                    <p className="text-sm text-red-500 animate-in slide-in-from-left-1 duration-200">
                      {errors.price.message}
                    </p>
                  )}
                </div>
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700">Description</label>
                <Textarea
                  placeholder="Enter product description"
                  className="min-h-[100px] transition-all duration-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                  {...register("description")}
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700 flex items-center gap-2">
                    <Image className="h-4 w-4" />
                    Image URL
                  </label>
                  <Input
                    placeholder="https://example.com/image.jpg"
                    className="transition-all duration-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    {...register("image_url")}
                  />
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700 flex items-center gap-2">
                    <Tag className="h-4 w-4" />
                    Category
                  </label>
                  <Input
                    placeholder="Enter category"
                    className="transition-all duration-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    {...register("category")}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700 flex items-center gap-2">
                  <Hash className="h-4 w-4" />
                  Stock Quantity
                </label>
                <Input
                  type="number"
                  placeholder="0"
                  className="transition-all duration-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  {...register("stock_quantity", {
                    required: "Stock quantity is required",
                    min: { value: 0, message: "Stock must be positive" },
                  })}
                />
                {errors.stock_quantity && (
                  <p className="text-sm text-red-500 animate-in slide-in-from-left-1 duration-200">
                    {errors.stock_quantity.message}
                  </p>
                )}
              </div>

              <div className="flex items-center space-x-3 p-4 bg-gray-50 rounded-lg border border-gray-200 hover:bg-gray-100 transition-colors">
                <input
                  type="checkbox"
                  {...register("prescription_required")}
                  id="prescription_required"
                  className="w-4 h-4 text-blue-600 rounded focus:ring-blue-500"
                />
                <label 
                  htmlFor="prescription_required" 
                  className="text-sm font-medium text-gray-700 flex items-center gap-2 cursor-pointer"
                >
                  <ShieldCheck className="h-4 w-4 text-red-500" />
                  Prescription Required
                </label>
              </div>

              <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                <Button
                  type="button"
                  variant="outline"
                  onClick={onClose}
                  className="px-6 hover:bg-gray-100 transition-colors"
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={isLoading}
                  onClick={handleSubmit(onSubmit)}
                  className="px-6 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200 disabled:transform-none disabled:opacity-50"
                >
                  {isLoading ? (
                    <div className="flex items-center gap-2">
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                      Saving...
                    </div>
                  ) : (
                    product ? "Update Product" : "Create Product"
                  )}
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default ProductForm;