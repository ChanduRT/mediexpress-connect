
import { useState } from "react";
import { useForm } from "react-hook-form";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/components/ui/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { useQueryClient } from "@tanstack/react-query";
import { X } from "lucide-react";

interface Product {
  id?: string;
  name: string;
  description: string | null;
  price: number;
  image_url: string | null;
  category: string | null;
  stock_quantity: number;
  prescription_required: boolean;
}

interface ProductFormProps {
  product?: Product;
  onClose: () => void;
}

const ProductForm = ({ product, onClose }: ProductFormProps) => {
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { register, handleSubmit, formState: { errors } } = useForm<Product>({
    defaultValues: product || {
      name: "",
      description: "",
      price: 0,
      image_url: "",
      category: "",
      stock_quantity: 0,
      prescription_required: false,
    },
  });

  const onSubmit = async (data: Product) => {
    setIsLoading(true);
    try {
      if (product?.id) {
        // Update existing product
        const { error } = await supabase
          .from('products')
          .update({
            name: data.name,
            description: data.description,
            price: data.price,
            image_url: data.image_url,
            category: data.category,
            stock_quantity: data.stock_quantity,
            prescription_required: data.prescription_required
          })
          .eq('id', product.id);

        if (error) throw error;

        toast({
          title: "Success",
          description: "Product updated successfully",
        });
      } else {
        // Create new product with UUID generated by Supabase
        const { error } = await supabase
          .from('products')
          .insert({
            name: data.name,
            description: data.description,
            price: data.price,
            image_url: data.image_url,
            category: data.category,
            stock_quantity: data.stock_quantity,
            prescription_required: data.prescription_required,
            id: crypto.randomUUID() // Generate UUID client-side
          });

        if (error) throw error;

        toast({
          title: "Success",
          description: "Product created successfully",
        });
      }

      queryClient.invalidateQueries({ queryKey: ['products'] });
      onClose();
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to save product",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
      <div className="relative w-full max-w-lg mx-4">
        <Button
          variant="ghost"
          size="icon"
          className="absolute right-2 top-2"
          onClick={onClose}
        >
          <X className="h-4 w-4" />
        </Button>
        <CardHeader>
          <CardTitle>
            {product ? "Edit Product" : "Add New Product"}
          </CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            <div>
              <Input
                placeholder="Product Name"
                {...register("name", { required: "Name is required" })}
              />
              {errors.name && (
                <p className="text-sm text-red-500">{errors.name.message}</p>
              )}
            </div>

            <div>
              <Textarea
                placeholder="Description"
                {...register("description")}
              />
            </div>

            <div>
              <Input
                type="number"
                step="0.01"
                placeholder="Price"
                {...register("price", {
                  required: "Price is required",
                  min: { value: 0, message: "Price must be positive" },
                })}
              />
              {errors.price && (
                <p className="text-sm text-red-500">{errors.price.message}</p>
              )}
            </div>

            <div>
              <Input
                placeholder="Image URL"
                {...register("image_url")}
              />
            </div>

            <div>
              <Input
                placeholder="Category"
                {...register("category")}
              />
            </div>

            <div>
              <Input
                type="number"
                placeholder="Stock Quantity"
                {...register("stock_quantity", {
                  required: "Stock quantity is required",
                  min: { value: 0, message: "Stock must be positive" },
                })}
              />
              {errors.stock_quantity && (
                <p className="text-sm text-red-500">{errors.stock_quantity.message}</p>
              )}
            </div>

            <div className="flex items-center space-x-2">
              <input
                type="checkbox"
                {...register("prescription_required")}
                id="prescription_required"
              />
              <label htmlFor="prescription_required">
                Prescription Required
              </label>
            </div>

            <div className="flex justify-end space-x-2">
              <Button
                type="button"
                variant="outline"
                onClick={onClose}
              >
                Cancel
              </Button>
              <Button
                type="submit"
                disabled={isLoading}
              >
                {isLoading ? "Saving..." : (product ? "Update" : "Create")}
              </Button>
            </div>
          </form>
        </CardContent>
      </div>
    </Card>
  );
};

export default ProductForm;
